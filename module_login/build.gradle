boolean toapp = mouldeToApplication.toBoolean()
if (toapp) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
//apply plugin: 'kotlin-android'
def config = rootProject.ext
android {
    compileSdkVersion config.android.compileSdkVersion
    buildToolsVersion config.android.buildToolsVersion

    defaultConfig {
        if (toapp) {
            applicationId "com.module.login"
        }
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode config.android.versionCode
        versionName config.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        if (toapp) {
            multiDexEnabled true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "MOULDE_TO_APPLICATION", "${mouldeToApplication}")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "MOULDE_TO_APPLICATION", "${mouldeToApplication}")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            if (toapp) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
//                java.srcDirs += "src/main/debug/java/";
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
//                java.srcDirs += "src/main/release/java/";
            }
            jniLibs.srcDirs = ['libs']
        }
    }
    resourcePrefix "ml_"
    viewBinding {
        enabled = true
    }
    repositories {
        flatDir {
            dirs 'libs', '../library/lib_base/libs'
        }
    }
}
if (toapp) {
//强制指定库
    configurations.all {
        resolutionStrategy {
            //force "com.google.android.material:material:${config.dependencies.material_version}"//1.3.0
            //force 'androidx.core:core-ktx:1.3.2'
            //force 'androidx.core:core:1.3.2'

            force "androidx.core:core-ktx:${config.dependencies.androidx_core_version}"
            force "androidx.core:core:${config.dependencies.androidx_core_version}"

            force "androidx.appcompat:appcompat:${config.dependencies.appcompat_version}"//1.3.0
            force "androidx.activity:activity:${config.dependencies.appcompat_version}"
            force "androidx.fragment:fragment:${config.dependencies.appcompat_version}"
        }
    }
}
dependencies {
    implementation project(path: ':library:lib_base')

    annotationProcessor "com.alibaba:arouter-compiler:${config.dependencies.route_version}"

    testImplementation "junit:junit:${config.dependencies.junit_version}"
    androidTestImplementation "androidx.test.ext:junit:${config.dependencies.ext_junit_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${config.dependencies.espresso_core_version}"
}