plugins {
    id 'com.android.library'
}
def config = rootProject.ext
android {
    compileSdkVersion config.android.compileSdkVersion
    buildToolsVersion config.android.buildToolsVersion

    defaultConfig {
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode config.android.versionCode
        versionName config.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "MOULDE_TO_APPLICATION", "${mouldeToApplication}")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "MOULDE_TO_APPLICATION", "${mouldeToApplication}")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning'
        disable 'MissingTranslation'
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    repositories {
        flatDir {
            dirs 'libs', '../library/lib_base/libs'
        }
    }
    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }
//    greendao {
//        //版本号
//        schemaVersion 1
//        //工程路径
//        targetGenDir 'src/main/java'
//        //包名
//        daoPackage 'com.android.db.dao'
//    }
}
dependencies {
    //api
    api project(path: ':library:lib_db')
    //api project(path: ':library:lib_gson')
    //api project(path: ':library:lib_permission')
    api project(path: ':library:lib_view')
    api 'com.github.getActivity:XXPermissions:13.5'
    implementation "com.github.getActivity:ToastUtils:${config.dependencies.toastutils_version}"
    //aroute
    annotationProcessor "com.alibaba:arouter-compiler:${config.dependencies.route_version}"
    api "com.alibaba:arouter-api:${config.dependencies.route_version}"
    //rxjava retrofit okhttp log
    //包含rxjava
    api "com.squareup.retrofit2:adapter-rxjava3:${config.dependencies.retrofit_version}"
    //implementation "io.reactivex.rxjava3:rxandroid:${config.dependencies.rxandroid_version}"
    implementation "com.jakewharton.rxbinding4:rxbinding:${config.dependencies.rxbinding_version}"
    implementation "com.squareup.okhttp3:okhttp:${config.dependencies.okhttp_version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${config.dependencies.okhttp_version}"
    //noinspection GradleDependency
    implementation "com.squareup.okio:okio:${config.dependencies.okio_version}"
    implementation "com.squareup.retrofit2:retrofit:${config.dependencies.retrofit_version}"
    //api "com.squareup.retrofit2:converter-gson:${config.dependencies.retrofit_version}"
    //title bar
    implementation "com.geyifeng.immersionbar:immersionbar:${config.dependencies.immersionbar_version}"
    //leakcanary
    //noinspection GradleDependency
    debugApi "com.squareup.leakcanary:leakcanary-android:${config.dependencies.leakcanary_version}"
    annotationProcessor "com.github.bumptech.glide:compiler:${config.dependencies.glide_version}"
    //3.0版本
    // PictureSelector 基础 (必须)
    api "io.github.lucksiege:pictureselector:${config.dependencies.pictureselector_version}"
    // 图片压缩 (按需引入)
    implementation "io.github.lucksiege:compress:${config.dependencies.pictureselector_version}"
    // 图片裁剪 (按需引入)
    implementation "io.github.lucksiege:ucrop:${config.dependencies.pictureselector_version}"
    // 自定义相机 (按需引入)
    api "io.github.lucksiege:camerax:${config.dependencies.pictureselector_version}"
    //七牛
    //noinspection GradleDependency
    implementation "com.qiniu:qiniu-android-sdk:${config.dependencies.qiniu_version}"
    //implementation "androidx.lifecyle:lifecyle:2.4.0"
    implementation "androidx.lifecycle:lifecycle-runtime:${config.dependencies.androidx_lifecycle_version}"
    //glide
    api "com.github.bumptech.glide:glide:${config.dependencies.glide_version}"

    //********************************************以下是view依赖**************************************************
    //横向刷新
    //api 'com.scwang.smartrefresh:SmartRefreshHorizontal:1.1.3-x'
    //api 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.3' //必须依赖 版本 1.1.0 以上
    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com、https://icons8.com/animated-icons
    implementation 'com.airbnb.android:lottie:4.1.0'
    //banner
    implementation 'io.github.youth5201314:banner:2.2.2'
    //AndRatingBar
    api 'com.github.wdsqjq:AndRatingBar:1.0.6'
    /*compileOnly*/
    api "jp.co.cyberagent.android:gpuimage:2.1.0"
    //drag
    api 'com.github.open-android:DragFooterView:0.1.0'
    //flex
    api 'com.google.android:flexbox:2.0.1'
}