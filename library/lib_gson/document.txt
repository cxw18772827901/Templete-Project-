Gson 解析容错框架(轮子哥出品:https://github.com/getActivity/GsonFactory)

一.容错介绍
目前支持容错的数据类型有：
Bean 类
数组集合
String（字符串）
boolean / Boolean（布尔值）
int / Integer（整数，属于数值类）
long /Long（长整数，属于数值类）
float / Float（单精度浮点数，属于数值类）
double / Double（双精度浮点数，属于数值类）
BigDecimal（精度更高的浮点数，属于数值类）

基本涵盖 99.99% 的开发场景，可以运行 Demo 中的单元测试用例来查看效果：
数据类型	容错的范围	            数据示例
bean	集合、字符串、布尔值、数值	[]、""、false、0
集合	    bean、字符串、布尔值、数值	{}、""、false、0
字符串	bean、集合、布尔值、数值	{}、[]、false、0
布尔值	bean、集合、字符串、数值	{}、[]、""、0
数值	    bean、集合、字符串、布尔值	{}、[]、""、false



二.常规用法
// 设置自定义的 Gson 对象
GsonFactory.setSingletonGson(Gson gson);
// 创建一个 Gson 构建器（已处理容错）
GsonBuilder gsonBuilder = GsonFactory.newGsonBuilder();
// 注册类型适配器
GsonFactory.registerTypeAdapterFactory(TypeAdapterFactory factory);
// 注册构造函数创建器
GsonFactory.registerInstanceCreator(Type type, InstanceCreator<?> creator);
// 设置 Json 解析容错监听
GsonFactory.setJsonCallback(new JsonCallback() {
    @Override
    public void onTypeException(TypeToken<?> typeToken, String fieldName, JsonToken jsonToken) {
        // Log.e("GsonFactory", "类型解析异常：" + typeToken + "#" + fieldName + "，后台返回的类型为：" + jsonToken);
        // 上报到 Bugly 错误列表
        CrashReport.postCatchedException(new IllegalArgumentException("类型解析异常：" + typeToken + "#" + fieldName + "，后台返回的类型为：" + jsonToken));
    }
});
//Retrofit + RxJava
Retrofit retrofit = new Retrofit.Builder()
        .addConverterFactory(GsonConverterFactory.create(GsonFactory.getSingletonGson()))
        .build();