apply plugin: 'com.android.library'
def config = rootProject.ext
android {
    compileSdkVersion config.android.compileSdkVersion
    buildToolsVersion config.android.buildToolsVersion

    defaultConfig {
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode config.android.versionCode
        versionName config.android.versionName
    }

    // 支持 Java JDK 8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    /*android.libraryVariants.all { variant ->
        // aar 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = "${rootProject.name}-${android.defaultConfig.versionName}.aar"
        }
    }*/
}

/*afterEvaluate {
    // 排除 BuildConfig.class
    generateReleaseBuildConfig.enabled = false
    generateDebugBuildConfig.enabled = false
}*/
//常用view控件汇总
dependencies {
    //androidx support
    //noinspection GradleDependency
    api "com.google.android.material:material:${config.dependencies.material_version}"
//    api "androidx.appcompat:appcompat:${config.dependencies.appcompat_version}"
    api "androidx.cardview:cardview:${config.dependencies.cardview_version}"
    api "androidx.recyclerview:recyclerview:${config.dependencies.recyclerview_version}"
    //noinspection GradleDependency
    api "androidx.constraintlayout:constraintlayout:${config.dependencies.constraintlayout_version}"
    api "androidx.viewpager2:viewpager2:${config.dependencies.viewpager2_version}"
    //api "com.nex3z:flow-layout:${config.dependencies.flow_layout_version}"
    //垂直刷新
    api "com.scwang.smart:refresh-layout-kernel:${config.dependencies.smart_refresh_version}"      //核心必须依赖
    api "com.scwang.smart:refresh-header-classics:${config.dependencies.smart_refresh_version}"    //经典刷新头
    api "com.scwang.smart:refresh-footer-classics:${config.dependencies.smart_refresh_version}"    //经典加载
    api "com.scwang.smart:refresh-header-material:${config.dependencies.smart_refresh_version}"
}

/*
// 防止编码问题
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}*/
